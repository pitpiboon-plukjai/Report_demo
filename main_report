from itertools import count
import pandas as pd
import warnings
import time
import numpy as np
import xlwings as xw

from pandas.core.common import SettingWithCopyWarning

warnings.simplefilter("ignore", UserWarning)
warnings.simplefilter(action="ignore", category=SettingWithCopyWarning)
"""
Hello Everybody, This is Earth's SSP report World. Don't Delete This message if you do your action was idiot and disrespectful !!!!!!!!!!!
From  Servant of King's Earth NonR [only Earth able to delete]
"""
# Shopee------------------------------------------------------------------
print("Lord Earth !!! give me open Shopee")
shp_file = 'SHP.xlsx'

# shp_df1 = pd.read_excel(shp_file, 'DATA1')
# shp_df2 = pd.read_excel(shp_file, 'DATA2')

shp_df1 = pd.read_excel(shp_file, 'G1')
shp_df2 = pd.read_excel(shp_file, 'G2')

# Mirakl------------------------------------------------------------------
print("Lord Earth !!! give me open Mirakl")

mrk_file = 'MRK.xlsx'
# mrk_df1 = pd.read_excel(mrk_file, 'orders')
mrk_df1 = pd.read_excel(mrk_file)
# Lazada------------------------------------------------------------------
print("Lord Earth !!! give me open Lazada")

laz_file = 'LAZ.xlsx'
# laz_df1 = pd.read_excel(laz_file, 'Sheet2')

laz_df1 = pd.read_excel(laz_file, 'ALLDATA')

# laz_df1 = pd.read_excel(laz_file, 'LAZ_Jan05')

# laz_df1 = pd.read_excel(laz_file, 'DATA1')

# JD------------------------------------------------------------------

print("Lord Earth !!! give me open JD")
jd_file = 'JD.xlsx'
jd_df1 = pd.read_excel(jd_file)

# Oms ------------------------------------------------------------------
print("Lord Earth !!! give me open OMS")
im_oms = pd.read_csv('OmsReports.csv')

# Location------------------------------------------------------------------

# location = pd.read_csv('FilteredOut.csv')

# Masterlist--------------------------------------------------------------------------
print("Lord Earth !!! give me open Masterlist")

mtr_file = pd.read_csv('MTL_Aware.csv', dtype=str)
mtr_file = mtr_file[['SKU', 'sku_simple', 'sku_config', 'SBC#1', 'COLOR', 'SIZE', 'price']]
mtr_file_mrk = pd.read_csv('MTL_Aware.csv')
mtr_file_mrk = mtr_file_mrk[['SKU', 'sku_simple', 'sku_config', 'SBC#1', 'COLOR', 'SIZE', 'price']]

# Sheet --------------------------------------------------------------------------
print("Waiting !!! I'm opening Google Sheet from K.Sundar Pichai ")

sheet_id = '1mfXsPGGQl-BxuuY2z3RuaSGc53mqqq6heIrundmiz3A'

jd_ws = '1162856794'
laz_ws = '0'
shp_ws = '1717881992'
mrk_ws = '1277584094'

jd_report = pd.read_csv(f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?gid={jd_ws}&format=csv", dtype=str)
laz_report = pd.read_csv(f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?gid={laz_ws}&format=csv", dtype=str)
shp_report = pd.read_csv(f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?gid={shp_ws}&format=csv", dtype=str)
mrk_report = pd.read_csv(f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?gid={mrk_ws}&format=csv")


# --------------------------------------------------------------------------

def SHOPEE():
    start_times = time.time()

    print("Start SHOPEE na ka *_* luvvv w8 plss")

    shp_filter1 = shp_df1.loc[:, ('หมายเลขคำสั่งซื้อ', 'สถานะการสั่งซื้อ', 'วันที่ทำการสั่งซื้อ',
                                  'คำสั่งซื้อที่ดำเนินการโดย Shopee',
                                  'เลขอ้างอิง SKU (SKU Reference No.)', 'ราคาตั้งต้น', 'ราคาขาย', 'จำนวน',
                                  'ราคาขายสุทธิ', 'จำนวนเงินทั้งหมด')]

    shp_filter2 = shp_filter1.loc[shp_filter1["สถานะการสั่งซื้อ"] == 'ที่ต้องจัดส่ง']
    shp_filter3 = shp_filter2.loc[shp_filter2["คำสั่งซื้อที่ดำเนินการโดย Shopee"] == 'No']

    shp_filter3.to_excel(r'MERGE_SHP.xlsx', index=False)

    shp_off1 = pd.read_excel('MERGE_SHP.xlsx')

    shp_off1['SKU'] = ''
    shp_off1['ORDERSKU'] = ''
    shp_off1['OMS'] = ''
    shp_off1['SHP ORDER'] = ''
    shp_off1['G Drive'] = " "
    shp_off1['CONFIG'] = ""
    shp_off1['SBC'] = ""
    shp_off1['COLOR'] = " "
    shp_off1['SIZE'] = " "
    shp_off1['FULLPRICE'] = ""
    shp_off1['SKU_FOR_LOCATION'] = ""
    shp_off1['LOCATION'] = ""
    shp_off1['Master_list'] = ""
    shp_off1['SHP_blank'] = ""
    shp_off1['Flage_SHP'] = ''

    all_row1 = int(len(shp_off1))

    for i in range(all_row1):
        shp_off1.__getitem__('SKU').__setitem__({i}, '=RIGHT(E' + str(i + 2) + ',7)')
        shp_off1.__getitem__('ORDERSKU').__setitem__({i}, '=A' + str(i + 2) + '&K' + str(i + 2))
        shp_off1.__getitem__('OMS').__setitem__({i}, '=VLOOKUP(L:L,OMS!F:F,1,0)')
        shp_off1.__getitem__('SHP ORDER').__setitem__({i}, '="SHP"&A' + str(i + 2))
        shp_off1.__getitem__('G Drive').__setitem__({i}, "=VLOOKUP(N:N,'G drive from sheet'!B:B,1,0)")
        shp_off1.__getitem__('CONFIG').__setitem__({i}, '=VLOOKUP($K' + str(i + 2) + ',Masterlist!B:G,2,0)')
        shp_off1.__getitem__('SBC').__setitem__({i}, '=TEXT(VLOOKUP($K' + str(i + 2) + ',Masterlist!B:G,3,0),0)')
        shp_off1.__getitem__('COLOR').__setitem__({i}, '=VLOOKUP($K' + str(i + 2) + ',Masterlist!B:G,4,0)')
        shp_off1.__getitem__('SIZE').__setitem__({i}, '=VLOOKUP($K' + str(i + 2) + ',Masterlist!B:G,5,0)')
        shp_off1.__getitem__('FULLPRICE').__setitem__({i}, '=VLOOKUP($K' + str(i + 2) + ',Masterlist!B:G,6,0)')
        shp_off1.__getitem__('SKU_FOR_LOCATION').__setitem__({i}, '=P' + str(i + 2) + '&"-"&K' + str(i + 2))

    # shp_filter3['SKU'] = '=RIGHT(E2,7)'
    # shp_filter3['ORDERSKU'] = '=A2&K2'
    # shp_filter3['OMS'] = '=VLOOKUP(L:L,OMS!F:F,1,0)'
    # shp_filter3['SHP ORDER'] = '="SHP"&A2'
    # shp_filter3['G Drive'] = "=VLOOKUP(N:N,'G drive from sheet'!B:B,1,0)"
    # shp_filter3['CONFIG'] = "=VLOOKUP($K2,Masterlist!B:G,2,0)"
    # shp_filter3['SBC'] = "=TEXT(VLOOKUP($K2,Masterlist!B:G,3,0),0)"
    # shp_filter3['COLOR'] = "=VLOOKUP($K2,Masterlist!B:G,4,0)"
    # shp_filter3['SIZE'] = "=VLOOKUP($K2,Masterlist!B:G,5,0)"
    # shp_filter3['FULLPRICE'] = "=VLOOKUP($K2,Masterlist!B:G,6,0)"

    shp_col2 = shp_df2.loc[:, ('หมายเลขคำสั่งซื้อ', 'สถานะการสั่งซื้อ', 'วันที่ทำการสั่งซื้อ',
                               'เลขอ้างอิง SKU (SKU Reference No.)', 'ราคาตั้งต้น', 'ราคาขาย', 'จำนวน',
                               'ราคาขายสุทธิ', 'จำนวนเงินทั้งหมด')]

    shp_col3 = shp_col2.loc[shp_col2["สถานะการสั่งซื้อ"] == 'ที่ต้องจัดส่ง']

    shp_col3.to_excel(r'MERGE_SHP.xlsx', index=False)

    shp_off2 = pd.read_excel('MERGE_SHP.xlsx')

    shp_off2['SKU'] = ''
    shp_off2['ORDERSKU'] = ''
    shp_off2['OMS'] = ''
    shp_off2['SHP ORDER'] = ''
    shp_off2['G Drive'] = ""
    shp_off2['CONFIG'] = ""
    shp_off2['SBC'] = ""
    shp_off2['COLOR'] = ""
    shp_off2['SIZE'] = ""
    shp_off2['FULLPRICE'] = ""
    shp_off2['SKU_FOR_LOCATION'] = ""
    shp_off2['LOCATION'] = ""
    shp_off2['Master_list'] = ""
    shp_off2['SHP_blank'] = ""
    shp_off2['Flage_SHP'] = ''

    all_row2 = int(len(shp_off2))

    for i in range(all_row2):
        shp_off2.__getitem__('SKU').__setitem__({i}, '=RIGHT(D' + str(i + 2) + ',7)')
        shp_off2.__getitem__('ORDERSKU').__setitem__({i}, '=A' + str(i + 2) + '&J' + str(i + 2))
        shp_off2.__getitem__('OMS').__setitem__({i}, "=VLOOKUP(K:K,OMS!F:F,1,0)")
        shp_off2.__getitem__('SHP ORDER').__setitem__({i}, '="SHP"&A' + str(i + 2))
        shp_off2.__getitem__('G Drive').__setitem__({i}, "=VLOOKUP(M:M,'G drive from sheet'!B:B,1,0)")
        shp_off2.__getitem__('CONFIG').__setitem__({i}, '=VLOOKUP($J' + str(i + 2) + ',Masterlist!B:G,2,0)')
        shp_off2.__getitem__('SBC').__setitem__({i}, '=TEXT(VLOOKUP($J' + str(i + 2) + ',Masterlist!B:G,3,0),0)')
        shp_off2.__getitem__('COLOR').__setitem__({i}, '=VLOOKUP($J' + str(i + 2) + ',Masterlist!B:G,4,0)')
        shp_off2.__getitem__('SIZE').__setitem__({i}, '=VLOOKUP($J' + str(i + 2) + ',Masterlist!B:G,5,0)')
        shp_off2.__getitem__('FULLPRICE').__setitem__({i}, '=VLOOKUP($J' + str(i + 2) + ',Masterlist!B:G,6,0)')
        shp_off2.__getitem__('SKU_FOR_LOCATION').__setitem__({i}, '=O' + str(i + 2) + '&"-"&J' + str(i + 2))

    # shp_col3['ORDERSKU'] = '=A2&J2'
    # shp_col3['OMS'] = '=VLOOKUP(K:K,OMS!F:F,1,0)'
    # shp_col3['SHP ORDER'] = '="SHP"&A2'
    # shp_col3['G Drive'] = "=VLOOKUP(M:M,'G drive from sheet'!B:B,1,0)"
    # shp_col3['CONFIG'] = "=VLOOKUP($J2,Masterlist!B:G,2,0)"
    # shp_col3['SBC'] = "=TEXT(VLOOKUP($J2,Masterlist!B:G,3,0),0)"
    # shp_col3['COLOR'] = "=VLOOKUP($J2,Masterlist!B:G,4,0)"
    # shp_col3['SIZE'] = "=VLOOKUP($J2,Masterlist!B:G,5,0)"
    # shp_col3['FULLPRICE'] = "=VLOOKUP($J2,Masterlist!B:G,6,0)"

    shp_ws_fil = shp_report.loc[:, ('Unnamed: 1', 'Shopee.1')]

    # im_oms['MIX'] = '=RIGHT(A2,14)&RIGHT(C2,7)'
    im_oms1 = im_oms.loc[im_oms["Order Number"].str.contains('SHP')]

    im_oms1.to_excel(r'MERGE_SHP.xlsx', index=False)

    oms_off = pd.read_excel('MERGE_SHP.xlsx')

    oms_off['MIX'] = ''

    oms_rows = int(len(oms_off))

    for i in range(oms_rows):
        oms_off.__getitem__('MIX').__setitem__({i}, '=RIGHT(A' + str(i + 2) + ',14)&RIGHT(C' + str(i + 2) + ',7)')

    # im_oms['MIX'] = '=A2&RIGHT(C2,7)'
    # shopee_file_new = pd.ExcelWriter('MERGE_SHP.xlsx')
    # shp_filter3.to_excel(shopee_file_new, sheet_name='DATA1', merge_cells=False, index=False)
    # shp_col3.to_excel(shopee_file_new, sheet_name='DATA2', merge_cells=False, index=False)
    # shopee_file_new.close()

    print("Waiting i will write file for you that will show soon!!!!!!")
    shopee_file_new = pd.ExcelWriter('MERGE_SHP.xlsx')
    shp_off1.to_excel(shopee_file_new, sheet_name='DATA1', merge_cells=False, index=False)
    shp_off2.to_excel(shopee_file_new, sheet_name='DATA2', merge_cells=False, index=False)
    # shp_col3.to_excel(shopee_file_new, sheet_name='DATA2', merge_cells=False, index=False)
    oms_off.to_excel(shopee_file_new, sheet_name='OMS', merge_cells=False, index=False)
    # im_oms1.to_excel(shopee_file_new, sheet_name='OMS', merge_cells=False, index=False)
    # shp_report.to_excel(shopee_file_new, sheet_name='G drive from she et', merge_cells=False, index=False)
    shp_ws_fil.to_excel(shopee_file_new, sheet_name='G drive from sheet', merge_cells=False, index=False)
    mtr_file.to_excel(shopee_file_new, sheet_name='Masterlist', merge_cells=False, index=False)
    shopee_file_new.close()

    #### Verse one test this and find location
    """LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
    EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
    TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
    GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
    OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO"""

    print("Almost done Lana For SHPP".encode("utf-8"))

    ###### Data 1 Shopee

    ### Reading Processing
    workbook = xw.Book('MERGE_SHP.xlsx')
    sheet1 = workbook.sheets['DATA1'].used_range.value
    df = pd.DataFrame(sheet1)
    data_sheet = df.iloc[1:, :]
    data_sheet.rename(columns=df.iloc[0, :],
                      inplace=True)

    print("Open File Done")
    ### Fixing coding
    See_details = data_sheet
    shp_col3_t = See_details.loc[See_details["สถานะการสั่งซื้อ"] == 'ที่ต้องจัดส่ง']
    shp_col4_t = shp_col3_t.loc[shp_col3_t["OMS"].isnull()]
    shp_col5_t = shp_col4_t.loc[shp_col4_t["G Drive"].isnull()]

    print("Finding location 1 Process NAA JAAA luvv :P")
    filteredout = pd.read_csv('FilteredOut.csv')
    Location_work = filteredout[['Sku', 'Location', 'Status']]

    Masterlist_work = []

    for box_master in range(len(shp_col5_t)):
        sale_Suti = shp_col5_t['ราคาขายสุทธิ'].iloc[box_master]
        sale_order_today = []
        # Looping for "sale_oerder_today"
        for box_master2 in range(len(shp_col5_t)):

            if shp_col5_t['หมายเลขคำสั่งซื้อ'].iloc[box_master2] == shp_col5_t['หมายเลขคำสั่งซื้อ'].iloc[box_master]:
                work_value = shp_col5_t['ราคาขายสุทธิ'].iloc[box_master2]
                sale_order_today.append(work_value)
        sum_sale_order_today = sum(sale_order_today)
        sale_AllAmount = shp_col5_t['จำนวนเงินทั้งหมด'].iloc[box_master]
        Masterlist_value = (sale_Suti / sum_sale_order_today) * sale_AllAmount
        Masterlist_work.append(Masterlist_value)
    # print("sale_Suti :",sale_Suti)
    # print("sum_sale_order_today :",sum_sale_order_today)
    # print("sale_AllAmount :",sale_AllAmount)

    All_location = []

    for box_1 in range(len(shp_col5_t)):
        location_nonS = shp_col5_t['SKU_FOR_LOCATION'].iloc[box_1]
        # location_nonS = np.array(location)
        Blog_location = []
        # print('location_nonS is :',box_1)
        print("Strat :", ((box_1 + 1) / len(shp_col5_t)) * 100)
        for box_2 in range(len(Location_work)):
            location_F = Location_work['Sku'].iloc[box_2]
            # location_F= np.array(location_F)
            if location_nonS == location_F:
                # print(Location_work['Location'].iloc[box_2])
                Find_location = Location_work['Location'].iloc[box_2]
                Blog_location.append(Find_location)
        Uniqe_location = set(Blog_location)
        All_location.append(Uniqe_location)

    SHP_blank = []
    Flag_output = []
    for blank_1 in range(len(shp_col5_t)):
        value_gg = " "
        value_flage = "Yes"
        SHP_blank.append(value_gg)
        Flag_output.append(value_flage)

    Last_locationset = shp_col5_t.reset_index()
    for box_add in range(len(Last_locationset)):
        Last_locationset.__getitem__('LOCATION').__setitem__({box_add}, str(All_location[box_add]))
        Last_locationset.__getitem__('Master_list').__setitem__({box_add}, str(Masterlist_work[box_add]))
        Last_locationset.__getitem__('SHP_blank').__setitem__({box_add}, str(SHP_blank[box_add]))
        Last_locationset.__getitem__('Flage_SHP').__setitem__({box_add}, str(Flag_output[box_add]))

    ######
    print('Done La first file luv')
    ###### Data 2 Shopee

    ### Reading Processing
    workbook = xw.Book('MERGE_SHP.xlsx')
    sheet1 = workbook.sheets['DATA2'].used_range.value
    df = pd.DataFrame(sheet1)
    data_sheet = df.iloc[1:, :]
    data_sheet.rename(columns=df.iloc[0, :],
                      inplace=True)

    ### Fixing coding
    See_details = data_sheet
    shp_col3_t = See_details.loc[See_details["สถานะการสั่งซื้อ"] == 'ที่ต้องจัดส่ง']
    shp_col4_t = shp_col3_t.loc[shp_col3_t["OMS"].isnull()]
    shp_col5_t = shp_col4_t.loc[shp_col4_t["G Drive"].isnull()]

    print("Finding location 2 Process NAA JAAA luvv :P")
    filteredout = pd.read_csv('FilteredOut.csv')
    Location_work = filteredout[['Sku', 'Location', 'Status']]

    Masterlist_work = []

    for box_master in range(len(shp_col5_t)):
        sale_Suti = shp_col5_t['ราคาขายสุทธิ'].iloc[box_master]
        sale_order_today = []
        # Looping for "sale_oerder_today"
        for box_master2 in range(len(shp_col5_t)):

            if shp_col5_t['หมายเลขคำสั่งซื้อ'].iloc[box_master2] == shp_col5_t['หมายเลขคำสั่งซื้อ'].iloc[box_master]:
                work_value = shp_col5_t['ราคาขายสุทธิ'].iloc[box_master2]
                sale_order_today.append(work_value)
        sum_sale_order_today = sum(sale_order_today)
        sale_AllAmount = shp_col5_t['จำนวนเงินทั้งหมด'].iloc[box_master]
        Masterlist_value = (sale_Suti / sum_sale_order_today) * sale_AllAmount
        Masterlist_work.append(Masterlist_value)

    # print("sale_Suti :",sale_Suti)
    # print("sum_sale_order_today :",sum_sale_order_today)
    # print("sale_AllAmount :",sale_AllAmount)

    All_location = []
    for box_1 in range(len(shp_col5_t)):
        location_nonS = shp_col5_t['SKU_FOR_LOCATION'].iloc[box_1]
        # location_nonS = np.array(location)
        Blog_location = []
        print("Start  :", round(((box_1 + 1) / len(shp_col5_t)) * 100), "%")
        # print('location_nonS is :',box_1)
        for box_2 in range(len(Location_work)):
            location_F = Location_work['Sku'].iloc[box_2]
            # location_F= np.array(location_F)
            if location_nonS == location_F:
                # print(Location_work['Location'].iloc[box_2])
                Find_location = Location_work['Location'].iloc[box_2]
                Blog_location.append(Find_location)
        Uniqe_location = set(Blog_location)
        All_location.append(Uniqe_location)

    SHP_blank = []
    Flag_output = []
    for blank_1 in range(len(shp_col5_t)):
        value_gg = " "
        value_flage = "Yes"
        SHP_blank.append(value_gg)
        Flag_output.append(value_flage)

    Last_locationset2 = shp_col5_t.reset_index()

    for box_add in range(len(Last_locationset2)):
        Last_locationset2.__getitem__('LOCATION').__setitem__({box_add}, str(All_location[box_add]))
        Last_locationset2.__getitem__('Master_list').__setitem__({box_add}, str(Masterlist_work[box_add]))
        Last_locationset2.__getitem__('SHP_blank').__setitem__({box_add}, str(SHP_blank[box_add]))
        Last_locationset2.__getitem__('Flage_SHP').__setitem__({box_add}, str(Flag_output[box_add]))

    print("**********************Second DOne too")

    G_drive_output = Last_locationset[
        ['วันที่ทำการสั่งซื้อ', 'SHP ORDER', 'จำนวน', 'ราคาตั้งต้น', 'SKU', 'SHP_blank', 'Flage_SHP', 'CONFIG', 'SBC',
         'COLOR', 'SIZE', 'FULLPRICE', 'Master_list', 'จำนวนเงินทั้งหมด', 'LOCATION']]

    G_drive_output2 = Last_locationset2[
        ['วันที่ทำการสั่งซื้อ', 'SHP ORDER', 'จำนวน', 'ราคาตั้งต้น', 'SKU', 'SHP_blank', 'Flage_SHP', 'CONFIG', 'SBC',
         'COLOR', 'SIZE', 'FULLPRICE', 'Master_list', 'จำนวนเงินทั้งหมด', 'LOCATION']]

    shopee_file_new = pd.ExcelWriter('MERGE_SHP_Location.xlsx')
    Last_locationset.to_excel(shopee_file_new, sheet_name='DATA1_location', merge_cells=False, index=False)
    Last_locationset2.to_excel(shopee_file_new, sheet_name='DATA2_location', merge_cells=False, index=False)
    G_drive_output.to_excel(shopee_file_new, sheet_name='G_drive_output1', merge_cells=False, index=False)
    G_drive_output2.to_excel(shopee_file_new, sheet_name='G_drive_output2', merge_cells=False, index=False)

    shopee_file_new.close()

    print('Time Usage in Shopee progress :', time.time() - start_times)
    print('Shopee Done!')


def MIRAKL():
    print("Start MIRAKL na ka *_* luvvv")

    start_times = time.time()

    mrk_filter1 = mrk_df1.loc[:, (
                                     'Date created', 'Order number', 'Quantity', 'Status', 'Amount', 'Store SKU',
                                     'Unit price',
                                     'Customer Paid Price')]

    mrk_filter2 = mrk_filter1.loc[mrk_filter1["Status"] == 'Shipping in Progress']

    mrk_filter2.to_excel(r'MERGE_MRK.xlsx', index=False)

    mrk_off = pd.read_excel('MERGE_MRK.xlsx')

    mrk_off['MRK ORDER'] = ''
    mrk_off['OMS'] = ''
    mrk_off['G DRIVE'] = ''
    mrk_off['CONFIG'] = ""
    mrk_off['SBC'] = ""
    mrk_off['COLOR'] = ""
    mrk_off['SIZE'] = ""
    mrk_off['SKU FOR LOCATION'] = ''
    mrk_off['LOCATION'] = ""
    mrk_off['Blank'] = ""
    mrk_off['Flag'] = ""
    mrk_off['Discount'] = ""

    all_row = int(len(mrk_off))

    for i in range(all_row):
        mrk_off.__getitem__('MRK ORDER').__setitem__({i}, '=LEFT(B' + str(i + 2) + ',20)')
        mrk_off.__getitem__('OMS').__setitem__({i}, '=VLOOKUP(I:I,OMS!F:F,1,0)')
        mrk_off.__getitem__('G DRIVE').__setitem__({i}, "=VLOOKUP(I:I,'G drive from sheet'!B:B,1,0)")
        mrk_off.__getitem__('CONFIG').__setitem__({i}, '=VLOOKUP($F' + str(i + 2) + ',Masterlist!B:G,2,0)')
        mrk_off.__getitem__('SBC').__setitem__({i}, '=TEXT(VLOOKUP($F' + str(i + 2) + ',Masterlist!B:G,3,0),0)')
        mrk_off.__getitem__('COLOR').__setitem__({i}, '=VLOOKUP($F' + str(i + 2) + ',Masterlist!B:G,4,0)')
        mrk_off.__getitem__('SIZE').__setitem__({i}, '=VLOOKUP($F' + str(i + 2) + ',Masterlist!B:G,5,0)')
        mrk_off.__getitem__('SKU FOR LOCATION').__setitem__({i}, '=L' + str(i + 2) + '&"-"&F' + str(i + 2))

    mrk_ws_fil = mrk_report.loc[:, ('Unnamed: 1', 'mirakl.1')]

    im_oms['MIX'] = ''
    im_oms1 = im_oms.loc[im_oms["Order Number"].str.contains('MRK')]

    im_oms1.to_excel(r'MERGE_MRK.xlsx', index=False)

    oms_off = pd.read_excel('MERGE_MRK.xlsx')

    oms_rows = int(len(oms_off))

    for i in range(oms_rows):
        oms_off.__getitem__('MIX').__setitem__({i}, '=RIGHT(A' + str(i + 2) + ',20)')

    print("Waiting i will write file for you that will show soon!!!!!!")
    mrk_file_new = pd.ExcelWriter('MERGE_MRK.xlsx')
    mrk_off.to_excel(mrk_file_new, sheet_name='DATA1', merge_cells=False, index=False)
    oms_off.to_excel(mrk_file_new, sheet_name='OMS', merge_cells=False, index=False)
    # mrk_report.to_excel(mrk_file_new, sheet_name='G drive from sheet', merge_cells=False, index=False)
    mrk_ws_fil.to_excel(mrk_file_new, sheet_name='G drive from sheet', merge_cells=False, index=False)
    mtr_file_mrk.to_excel(mrk_file_new, sheet_name='Masterlist', merge_cells=False, index=False)
    mrk_file_new.close()

    #### Finding Location for the process

    ###### Data 1 Shopee

    ### Reading Processing
    workbook = xw.Book('MERGE_MRK.xlsx')
    sheet1 = workbook.sheets['DATA1'].used_range.value
    df = pd.DataFrame(sheet1)
    data_sheet = df.iloc[1:, :]
    data_sheet.rename(columns=df.iloc[0, :],
                      inplace=True)

    ### Fixing coding
    See_details = data_sheet
    shp_col3_t = See_details.loc[See_details["Status"] == 'Shipping in Progress']
    shp_col4_t = shp_col3_t.loc[shp_col3_t["OMS"].isnull()]
    shp_col5_t = shp_col4_t.loc[shp_col4_t["G DRIVE"].isnull()]

    ### Location parts
    print("Finding location Process NAA JAAA luvv :P")
    filteredout = pd.read_csv('FilteredOut.csv')
    Location_work = filteredout[['Sku', 'Location', 'Status']]

    All_location = []
    for box_1 in range(len(shp_col5_t)):
        location_nonS = shp_col5_t['SKU FOR LOCATION'].iloc[box_1]
        # location_nonS = np.array(location)
        Blog_location = []
        # print('location_nonS is :',box_1)
        print("Strat :", ((box_1 + 1) / len(shp_col5_t)) * 100, "%")
        for box_2 in range(len(Location_work)):
            location_F = Location_work['Sku'].iloc[box_2]
            # location_F= np.array(location_F)
            if location_nonS == location_F:
                # print(Location_work['Location'].iloc[box_2])
                Find_location = Location_work['Location'].iloc[box_2]
                Blog_location.append(Find_location)
        Uniqe_location = set(Blog_location)
        All_location.append(Uniqe_location)

    Blank_output = []
    Flag_output = []
    Discount = []

    for blank_1 in range(len(shp_col5_t)):
        value_gg = " "
        Blank_output.append(value_gg)
        Flag_output.append(value_gg)

        value_discount = (shp_col5_t['Unit price'].iloc[blank_1] * shp_col5_t['Quantity'].iloc[blank_1]) - \
                         shp_col5_t['Customer Paid Price'].iloc[blank_1]
        Discount.append(value_discount)

    Last_locationset = shp_col5_t.reset_index()
    for box_add in range(len(Last_locationset)):
        Last_locationset.__getitem__('LOCATION').__setitem__({box_add}, str(All_location[box_add]))
        Last_locationset.__getitem__('Blank').__setitem__({box_add}, str(Blank_output[box_add]))
        Last_locationset.__getitem__('Flag').__setitem__({box_add}, str(Flag_output[box_add]))
        Last_locationset.__getitem__('Discount').__setitem__({box_add}, str(Discount[box_add]))

    G_drive_output = Last_locationset[
        ['Date created', 'Order number', 'Quantity', 'Amount', 'Store SKU', 'Blank', 'Flag', 'CONFIG', 'SBC', 'COLOR',
         'SIZE', 'Unit price', 'Discount', 'Customer Paid Price', 'LOCATION']]

    shopee_file_new = pd.ExcelWriter('MERGE_MRK_Location.xlsx')
    Last_locationset.to_excel(shopee_file_new, sheet_name='DATA1_location', merge_cells=False, index=False)
    G_drive_output.to_excel(shopee_file_new, sheet_name='G_drive_output1', merge_cells=False, index=False)

    shopee_file_new.close()

    # all_row = int(len(mrk_off))

    # print(mrk_off)

    print('Time Usage in MRK progress :', time.time() - start_times)
    print('Mirakl Done!')


def LAZADA():
    start_times = time.time()
    print("Start LAZADA na ka *_* luvvv")

    laz_filter1 = laz_df1.loc[:, (
                                     'Seller SKU', 'Created at', 'Order Number', 'Paid Price',
                                     'Shipment Type Name', 'Status'
                                 )]

    laz_filter2 = laz_filter1.loc[laz_filter1["Shipment Type Name"] == 'Dropshipping']
    laz_filter3 = laz_filter2.loc[laz_filter2["Status"] == 'Pending']

    laz_filter3.to_excel(r'MERGE_LAZ.xlsx', index=False)

    laz_off = pd.read_excel('MERGE_LAZ.xlsx')
    #
    laz_off['7F'] = ''
    laz_off['Merge J & BP'] = ''
    laz_off['OMS'] = ''
    laz_off['Laz'] = ''
    laz_off['G Drive 7'] = ""
    laz_off['CONFIG'] = ""
    laz_off['SBC'] = ""
    laz_off['COLOR'] = ""
    laz_off['SIZE'] = ""
    laz_off['FULLPRICE'] = ""
    laz_off['SKU FOR LOCATION'] = ''
    laz_off['LOCATION'] = ''
    laz_off['Blnk_LZD'] = ''
    laz_off['Quantity_LZD'] = ''
    laz_off['Flage_LZD'] = ''
    laz_off['Discount_LZD'] = ''

    all_row = int(len(laz_off))
    #
    for i in range(all_row):
        laz_off.__getitem__('7F').__setitem__({i}, '=RIGHT(A' + str(i + 2) + ',7)')
        laz_off.__getitem__('Merge J & BP').__setitem__({i}, '=C' + str(i + 2) + '&G' + str(i + 2))
        laz_off.__getitem__('OMS').__setitem__({i}, '=VLOOKUP(H:H,OMS!F:F,1,0)')
        laz_off.__getitem__('Laz').__setitem__({i}, '="LAZ"&C' + str(i + 2))
        laz_off.__getitem__('G Drive 7').__setitem__({i}, "=VLOOKUP(J:J,'G drive from sheet'!B:B,1,0)")
        laz_off.__getitem__('CONFIG').__setitem__({i}, "=VLOOKUP($G" + str(i + 2) + ',Masterlist!B:G,2,0)')
        laz_off.__getitem__('SBC').__setitem__({i}, "=TEXT(VLOOKUP($G" + str(i + 2) + ',Masterlist!B:G,3,0),0)')
        laz_off.__getitem__('COLOR').__setitem__({i}, "=VLOOKUP($G" + str(i + 2) + ',Masterlist!B:G,4,0)')
        laz_off.__getitem__('SIZE').__setitem__({i}, "=VLOOKUP($G" + str(i + 2) + ',Masterlist!B:G,5,0)')
        laz_off.__getitem__('FULLPRICE').__setitem__({i}, "=VLOOKUP($G" + str(i + 2) + ',Masterlist!B:G,6,0)')
        laz_off.__getitem__('SKU FOR LOCATION').__setitem__({i}, '=L' + str(i + 2) + '&"-"&G' + str(i + 2))

    laz_ws_fil = laz_report.loc[:, ('Unnamed: 1', 'Lazada.1')]
    # im_oms['MIX'] = '=MID(A2,4,15)&RIGHT(C2,7)'
    im_oms['MIX'] = ''
    im_oms1 = im_oms.loc[im_oms["Order Number"].str.contains('LAZ')]

    im_oms1.to_excel(r'MERGE_LAZ.xlsx', index=False)

    oms_off = pd.read_excel('MERGE_LAZ.xlsx')

    oms_rows = int(len(oms_off))

    for i in range(oms_rows):
        oms_off.__getitem__('MIX').__setitem__({i}, '=MID(A' + str(i + 2) + ',4,15)&RIGHT(C' + str(i + 2) + ',7)')

    laz_file_new = pd.ExcelWriter('MERGE_LAZ.xlsx')
    laz_off.to_excel(laz_file_new, sheet_name='DATA1', merge_cells=False, index=False)
    # laz_filter3.to_excel(laz_file_new, sheet_name='DATA1', merge_cells=False, index=False)
    oms_off.to_excel(laz_file_new, sheet_name='OMS', merge_cells=False, index=False)

    # laz_report.to_excel(laz_file_new, sheet_name='G drive from sheet', merge_cells=False, index=False)
    laz_ws_fil.to_excel(laz_file_new, sheet_name='G drive from sheet', merge_cells=False, index=False)
    mtr_file.to_excel(laz_file_new, sheet_name='Masterlist', merge_cells=False, index=False)
    laz_file_new.close()

    """
    Finding Location for the process 
    """

    ###### Data 1 Shopee

    ### Reading Processing
    workbook = xw.Book('MERGE_LAZ.xlsx')
    sheet1 = workbook.sheets['DATA1'].used_range.value
    df = pd.DataFrame(sheet1)
    data_sheet = df.iloc[1:, :]
    data_sheet.rename(columns=df.iloc[0, :],
                      inplace=True)

    ### Fixing coding
    See_details = data_sheet
    shp_col3_t = See_details.loc[See_details["Shipment Type Name"] == 'Dropshipping']
    shp_col3_t = shp_col3_t.loc[See_details["Status"] == 'Pending']
    shp_col4_t = shp_col3_t.loc[shp_col3_t["OMS"].isnull()]
    shp_col5_t = shp_col4_t.loc[shp_col4_t["G Drive 7"].isnull()]

    ### Location parts
    print("Finding location Process NAA JAAA luvv :P")
    filteredout = pd.read_csv('FilteredOut.csv')
    Location_work = filteredout[['Sku', 'Location', 'Status']]

    All_location = []
    for box_1 in range(len(shp_col5_t)):
        location_nonS = shp_col5_t['SKU FOR LOCATION'].iloc[box_1]
        # location_nonS = np.array(location)
        Blog_location = []
        # print('location_nonS is :',box_1)
        print("Strat :", ((box_1 + 1) / len(shp_col5_t)) * 100, "%")
        for box_2 in range(len(Location_work)):
            location_F = Location_work['Sku'].iloc[box_2]
            # location_F= np.array(location_F)
            if location_nonS == location_F:
                # print(Location_work['Location'].iloc[box_2])
                Find_location = Location_work['Location'].iloc[box_2]
                Blog_location.append(Find_location)
        Uniqe_location = set(Blog_location)
        All_location.append(Uniqe_location)

    Blank_output = []
    Flag_output = []
    Discount = []
    Quantity = []

    for blank_1 in range(len(shp_col5_t)):
        value_gg = " "
        value_flage = "Yes"
        gg = "1"
        Blank_output.append(value_gg)
        Flag_output.append(value_flage)
        Quantity.append(gg)
        # Value_discount = shp_col5_t['FULLPRICE'].iloc[blank_1] - shp_col5_t['Paid Price'].iloc[blank_1]
        # Discount.append(value_discount)

    Last_locationset = shp_col5_t.reset_index()
    for box_add in range(len(Last_locationset)):
        Last_locationset.__getitem__('LOCATION').__setitem__({box_add}, str(All_location[box_add]))
        Last_locationset.__getitem__('Blnk_LZD').__setitem__({box_add}, str(Blank_output[box_add]))
        Last_locationset.__getitem__('Quantity_LZD').__setitem__({box_add}, str(Quantity[box_add]))
        Last_locationset.__getitem__('Flage_LZD').__setitem__({box_add}, str(Flag_output[box_add]))
        # Last_locationset.__getitem__('Discount_LZD').__setitem__({box_add}, str(Discount[box_add]))

    G_drive_output = Last_locationset[
        ['Created at', 'Laz', 'Quantity_LZD', 'Blnk_LZD', '7F', 'Blnk_LZD', 'Flage_LZD', 'CONFIG', 'SBC', 'COLOR',
         'SIZE', 'FULLPRICE', 'Blnk_LZD', 'Paid Price', 'LOCATION']]

    shopee_file_new = pd.ExcelWriter('MERGE_LAZ_Location.xlsx')
    Last_locationset.to_excel(shopee_file_new, sheet_name='DATA1_location', merge_cells=False, index=False)
    G_drive_output.to_excel(shopee_file_new, sheet_name='G_drive_output1', merge_cells=False, index=False)

    shopee_file_new.close()

    print('Time Usage in LAZADA progress :', time.time() - start_times)
    print('Lazada Done!')


def JD():
    start_times = time.time()
    print("Start JD na ka *_* luvvv")

    jd_filter1 = jd_df1.loc[:, (
                                   'Order Number', 'Order Time', 'Payment Method', 'Eclp Order',
                                   'Product UPC Code', 'Jingdong Price', 'Qty', 'Price Promotion', 'Order Status'

                               )]

    # jd_filter1['SKU'] = '=RIGHT(E2,7)'
    # jd_filter1['ORDERSKU'] = '=A2&J2'
    # jd_filter1['OMS'] = "=VLOOKUP(K:K,OMS!F:F,1,0)"
    # jd_filter1['JD ORDER'] = '="JD"&A2'
    # jd_filter1['G Drive'] = "=VLOOKUP(M:M,'G drive from sheet'!B:B,1,0)"
    # jd_filter1['CONFIG'] = "=VLOOKUP($J2,Masterlist!B:G,2,0)"
    # jd_filter1['SBC'] = "=TEXT(VLOOKUP($J2,Masterlist!B:G,3,0),0)"
    # jd_filter1['COLOR'] = "=VLOOKUP($J2,Masterlist!B:G,4,0)"
    # jd_filter1['SIZE'] = "=VLOOKUP($J2,Masterlist!B:G,5,0)"
    # jd_filter1['FULLPRICE'] = "=VLOOKUP($J2,Masterlist!B:G,6,0)"

    jd_filter2 = jd_filter1.loc[jd_filter1["Order Status"] == 'Waiting for shipment']
    jd_filter3 = jd_filter2.loc[jd_filter2["Eclp Order"] == 'No']

    jd_filter3.to_excel('MERGE_JD.xlsx', index=False)

    jd_off = pd.read_excel('MERGE_JD.xlsx')

    jd_off['SKU'] = ''
    jd_off['ORDERSKU'] = ''
    jd_off['OMS'] = ""
    jd_off['JD ORDER'] = '="'
    jd_off['G Drive'] = " "
    jd_off['CONFIG'] = " "
    jd_off['SBC'] = "= "
    jd_off['COLOR'] = " "
    jd_off['SIZE'] = " "
    jd_off['FULLPRICE'] = " "
    jd_off['SKU FOR LOCATION'] = ''
    jd_off['LOCATION'] = " "
    jd_off['Flag'] = ' '

    all_rows = int(len(jd_off))

    for i in range(all_rows):
        jd_off.__getitem__('SKU').__setitem__({i}, '=RIGHT(E' + str(i + 2) + ',7)')
        jd_off.__getitem__('ORDERSKU').__setitem__({i}, '=A' + str(i + 2) + '&J' + str(i + 2))
        jd_off.__getitem__('OMS').__setitem__({i}, '=VLOOKUP(K:K,OMS!F:F,1,0)')
        jd_off.__getitem__('JD ORDER').__setitem__({i}, '="JD"&A' + str(i + 2))
        jd_off.__getitem__('G Drive').__setitem__({i}, "=VLOOKUP(M:M,'G drive from sheet'!B:B,1,0)")
        jd_off.__getitem__('CONFIG').__setitem__({i}, "=VLOOKUP($J" + str(i + 2) + ',Masterlist!B:G,2,0)')
        jd_off.__getitem__('SBC').__setitem__({i}, "=TEXT(VLOOKUP($J" + str(i + 2) + ',Masterlist!B:G,3,0),0)')
        jd_off.__getitem__('COLOR').__setitem__({i}, "=VLOOKUP($J" + str(i + 2) + ',Masterlist!B:G,4,0)')
        jd_off.__getitem__('SIZE').__setitem__({i}, "=VLOOKUP($J" + str(i + 2) + ',Masterlist!B:G,5,0)')
        jd_off.__getitem__('FULLPRICE').__setitem__({i}, "=VLOOKUP($J" + str(i + 2) + ',Masterlist!B:G,6,0)')
        jd_off.__getitem__('SKU FOR LOCATION').__setitem__({i}, "=O" + str(i + 2) + '&"-"&J' + str(i + 2))

    jd_ws_fil = jd_report.loc[:, ('Unnamed: 1', 'JD.1')]

    # im_oms['MIX'] = '=RIGHT(A2,8)&RIGHT(C2,7)'
    im_oms1 = im_oms.loc[im_oms["Order Number"].str.contains('JD')]

    im_oms1.to_excel('MERGE_JD.xlsx', index=False)

    oms_off = pd.read_excel('MERGE_JD.xlsx')

    oms_off['MIX'] = ''

    oms_rows = int(len(oms_off))

    for i in range(oms_rows):
        oms_off.__getitem__('MIX').__setitem__({i}, '=RIGHT(A' + str(i + 2) + ',8)&RIGHT(C' + str(i + 2) + ',7)')

    jd_file_new = pd.ExcelWriter('MERGE_JD.xlsx')
    jd_off.to_excel(jd_file_new, sheet_name='DATA1', merge_cells=False, index=False)
    # jd_filter3.to_excel(jd_file_new, sheet_name='DATA1', merge_cells=False, index=False)
    oms_off.to_excel(jd_file_new, sheet_name='OMS', merge_cells=False, index=False)
    # jd_report.to_excel(jd_file_new, sheet_name='G drive from sheet', merge_cells=False, index=False)
    jd_ws_fil.to_excel(jd_file_new, sheet_name='G drive from sheet', merge_cells=False, index=False)
    mtr_file.to_excel(jd_file_new, sheet_name='Masterlist', merge_cells=False, index=False)
    jd_file_new.close()

    #### Finding Location for the process

    ###### Data 1 Shopee

    ### Reading Processing
    workbook = xw.Book('MERGE_JD.xlsx')
    sheet1 = workbook.sheets['DATA1'].used_range.value
    df = pd.DataFrame(sheet1)
    data_sheet = df.iloc[1:, :]
    data_sheet.rename(columns=df.iloc[0, :],
                      inplace=True)

    ### Fixing coding
    See_details = data_sheet
    shp_col3_t = See_details.loc[See_details["Order Status"] == 'Waiting for shipment']
    shp_col4_t = shp_col3_t.loc[shp_col3_t["OMS"].isnull()]
    shp_col5_t = shp_col4_t.loc[shp_col4_t["G Drive"].isnull()]

    ### Location parts
    print("Finding location Process NAA JAAA luvv :P")
    filteredout = pd.read_csv('FilteredOut.csv')
    Location_work = filteredout[['Sku', 'Location', 'Status']]

    All_location = []
    for box_1 in range(len(shp_col5_t)):
        location_nonS = shp_col5_t['SKU FOR LOCATION'].iloc[box_1]
        # location_nonS = np.array(location)
        Blog_location = []
        # print('location_nonS is :',box_1)
        print("Strat :", ((box_1 + 1) / len(shp_col5_t)) * 100, "%")
        for box_2 in range(len(Location_work)):
            location_F = Location_work['Sku'].iloc[box_2]
            # location_F= np.array(location_F)
            if location_nonS == location_F:
                # print(Location_work['Location'].iloc[box_2])
                Find_location = Location_work['Location'].iloc[box_2]
                Blog_location.append(Find_location)
        Uniqe_location = set(Blog_location)
        All_location.append(Uniqe_location)

    Flage_list = []

    for blank_1 in range(len(shp_col5_t)):
        value_gg = " "
        Flage_list.append(value_gg)

    Last_locationset = shp_col5_t.reset_index()
    for box_add in range(len(Last_locationset)):
        Last_locationset.__getitem__('LOCATION').__setitem__({box_add}, str(All_location[box_add]))
        Last_locationset.__getitem__('Flag').__setitem__({box_add}, str(Flage_list[box_add]))

    G_drive_output = Last_locationset[
        ['Order Time', 'JD ORDER', 'Qty', 'Jingdong Price', 'SKU', 'Payment Method', 'Flag', 'CONFIG', 'SBC', 'COLOR',
         'SIZE', 'FULLPRICE', 'Price Promotion', 'Flag', 'LOCATION']]

    shopee_file_new = pd.ExcelWriter('MERGE_JD_Location.xlsx')
    Last_locationset.to_excel(shopee_file_new, sheet_name='DATA1_location', merge_cells=False, index=False)
    G_drive_output.to_excel(shopee_file_new, sheet_name='G_drive_output1', merge_cells=False, index=False)
    shopee_file_new.close()

    print('Time Usage in JD progress :', time.time() - start_times)
    print('JD Done!')


#

start_times_allpro = time.time()

SHOPEE()
xw.Book('MERGE_SHP_Location.xlsx')

MIRAKL()
xw.Book('MERGE_MRK_Location.xlsx')

JD()
xw.Book('MERGE_JD_Location.xlsx')

LAZADA()
xw.Book('MERGE_LAZ_Location.xlsx')

print('!!! Good Bye today we use  :', time.time() - start_times_allpro, "Second !!!!!")
print('Compile Successfully! ')


